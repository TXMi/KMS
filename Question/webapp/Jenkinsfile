pipeline {
 	agent any
 	stages {
 		stage ('Checkout') {
 			steps {
 				git branch:'main', url: 'https://github.com/TXMi/Practice.git'
 			}
 		}
 
 		stage('Code Quality Check via SonarQube') {
 			steps {
 				script {
 					def scannerHome = tool 'SonarQube';
 						withSonarQubeEnv('SonarQube') {
 						sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=Testing -Dsonar.sources=."
 						}
 					}
 				}
 			}
 		}
		stage('OWASP DependencyCheck') {
			steps {
				dependencyCheck additionalArguments: '--format HTML --format XML', odcInstallation: 'Default'
			}
		}

 	post {
 		always {
 			recordIssues enabledForFailure: true, tool: sonarQube()
 		}
		success {
			dependencyCheckPublisher pattern: 'dependency-check-report.xml'
		}

 	}
}
